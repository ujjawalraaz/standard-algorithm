/*
          
Method-1:
One simple way of writing code for topological sorting is simple doing dfs and storing data in a stack and after this print it one by one 
by top of the stack...
CODE:

*/

void Graph::topologicalSortUtil(int v, bool visited[],  
                                stack<int> &Stack) 
{ 
    // Mark the current node as visited. 
    visited[v] = true; 
  
    // Recur for all the vertices adjacent to this vertex 
    list<int>::iterator i; 
    for (i = adj[v].begin(); i != adj[v].end(); ++i) 
        if (!visited[*i]) 
            topologicalSortUtil(*i, visited, Stack); 
  
    // Push current vertex to stack which stores result 
    Stack.push(v); 
} 
  
// The function to do Topological Sort. It uses recursive  
// topologicalSortUtil() 
void Graph::topologicalSort() 
{ 
    stack<int> Stack; 
  
    // Mark all the vertices as not visited 
    bool *visited = new bool[V]; 
    for (int i = 0; i < V; i++) 
        visited[i] = false; 
  
    // Call the recursive helper function to store Topological 
    // Sort starting from all vertices one by one 
    for (int i = 0; i < V; i++) 
      if (visited[i] == false) 
        topologicalSortUtil(i, visited, Stack); 
  
    // Print contents of stack 
    while (Stack.empty() == false) 
    { 
        cout << Stack.top() << " "; 
        Stack.pop(); 
    } 
} 








/*

Method-2:
                      CODED BY:ujjawal_singh
                      DATE    :08/01/2020
                      
                      
  */
  
 // time complexity:O(V+E)
  
  int* topoSort(int n, vector<int> adj[])
{
    // Your code here
    int* ans=new int[n];
    int deg[n]={0};
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<adj[i].size();j++)
        deg[adj[i].at(j)]++;
    }
    queue<int> q1;
    for(int i=0;i<n;i++)
    if(deg[i]==0)
    q1.push(i);
    int count=0;
    while(!q1.empty())
    {
        int t=q1.front();
        q1.pop();
        ans[count]=t;
        count++;
        for(int j=0;j<adj[t].size();j++){
        deg[adj[t].at(j)]--;
        if(deg[adj[t].at(j)]==0)
        q1.push(adj[t].at(j));
        }
    }
    if(count!=n)
    {
        cout<<"Topological sorting not exists coz of cycle...";
        return(ans);
    }
    return(ans);
}

    
