#include<iostream>
#include<bits/stdc++.h>
using namespace std;
vector<vector<pair<int,int>>> graph;
vector<long long int> dist;
vector<int> perv;
vector<int> ans;
vector < bool > visited;
int main()
{
    int n,m;
    cin>>n>>m;
    graph.resize(n+5);
    dist.resize(n+5,1e16);
    perv.resize(n+5,-1);
    visited.resize(n+5);
   // cout<<dist[n]<<endl;
    while(m--)
    {
        int s,d,c;
        cin>>s>>d>>c;
        graph[s].push_back(make_pair(d,c));
        graph[d].push_back(make_pair(s,c));
    }
  /*  for(int i=1;i<=n;i++)
    {
        dist[i]=1e16;
        perv[i]=-1;
    }*/
   dist[1]=0;
   deque<int> q;
   q.push_front(1);
   visited[1]=true;
   while(!q.empty())
   {
       int v=q.front();
       q.pop_front();
       for(size_t i=0;i<graph[v].size();i++)
       {
           int a=graph[v][i].first;
           int b=graph[v][i].second;
           if(dist[v]+b<dist[a])
           {
               dist[a]=dist[v]+b;
               perv[a]=v;
               if(!visited[a])
               q.push_front(a);
               else
               q.push_back(a);
               visited[a]=true;              
           }
       }

   }
    if (dist[n] < 1e16)
    {
        for (int i = n;i != -1;i = perv[i])
            ans.push_back(i);
 
        for (int i = ans.size() - 1;i > -1;--i)
            cout<<ans[i]<<" ";
        cout<<endl;
    }
    else
      printf("-1");  
    return(0);
}




//BY implementing Priority queue...


ll shortest_path(ll src,ll dest,ll n,vector<pair<ll,ll>> v1[])
{
	priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>> p1;
	p1.push(make_pair(0,src));
	ll dist[n+1];
	for(ll i=0;i<=n;i++)
	dist[i]=INT_MAX;
	dist[src]=0;
	while(!p1.empty())
	{
		//pair<ll,ll> temp=p1.top();
        ll u=p1.top().second;
        ll co=p1.top().first;
        p1.pop();
      //  cout<<"ujjawal"<<endl;
        if(co!=dist[u])
        	continue;
        if(u==dest)
        return(dist[u]);
    //    cout<<"mdcewl"<<endl;
        for(ll i=0;i<v1[u].size();i++)
        {
      //      cout<<"cc"<<endl; 
            pair<ll,ll> p2=v1[u][i];
            ll v=p2.second;
            ll cost=p2.first;
            if(dist[v]>dist[u]+cost){
            	dist[v]=dist[u]+cost;
            	p1.push(make_pair(dist[v],v));
            }
        }
	}
}

